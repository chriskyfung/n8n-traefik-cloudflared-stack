volumes:
  n8n_storage:
  traefik_data:

networks:
  n8n-net:

x-n8n: &service-n8n
  image: docker.io/n8nio/n8n:stable
  networks: ['n8n-net']
  environment:
    - N8N_HOST=${N8N_HOST}
    - N8N_PORT=5678
    - N8N_PROTOCOL=https
    - NODE_ENV=production
    - N8N_EDITOR_BASE_URL=https://${N8N_HOST}/
    - WEBHOOK_URL=https://${N8N_WEBHOOK}/
    - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
    - DB_SQLITE_VACUUM_ON_STARTUP=${DB_SQLITE_VACUUM_ON_STARTUP}

services:
  traefik:
    image: docker.io/traefik:v3.5
    container_name: traefik
    depends_on:
      n8n:
        condition: service_healthy
    restart: always
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_WEBHOOK=${N8N_WEBHOOK}
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks: ['n8n-net']
    command:
      - "--log"
      - "--log.level=${LOG_LEVEL:-INFO}"
      - "--log.format=json"
      - "--api=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--providers.docker=false"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      # - "--serversTransport.insecureSkipVerify=true" # Allow self-signed certificates for target hosts - https://doc.traefik.io/traefik/routing/overview/#insecureskipverify
      - "--entrypoints.traefik.address=:8080"
      - "--entrypoints.n8n_ui.address=:8082"
      - "--entrypoints.n8n_webhook.address=:8083"
    ports:
      - "8082:8082"
      - "8083:8083"
    volumes:
      - traefik_data:/letsencrypt:z
      - ./traefik:/etc/traefik/dynamic:ro,z

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:5678/healthz || exit 1"]
      interval: 1m
      timeout: 10s
      retries: 3
    volumes:
      - n8n_storage:/home/node/.n8n
      # - ./n8n/backup:/backup
      # - ./shared:/data/shared

  cloudflared:
    image: docker.io/cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: always
    networks: ['n8n-net']
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
